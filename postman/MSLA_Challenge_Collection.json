{
  "info": {
    "_postman_id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
    "name": "MSLA Challenge - Exchange API",
    "description": "Colección para probar el API de conversión de monedas del desafío MSLA",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "basic",
    "basic": [
      {
        "key": "password",
        "value": "password",
        "type": "string"
      },
      {
        "key": "username",
        "value": "admin",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [""]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [""]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Currency Conversion",
      "item": [
        {
          "name": "Convert USD to PEN",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has conversion data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('from');",
                  "    pm.expect(jsonData).to.have.property('to');",
                  "    pm.expect(jsonData).to.have.property('originalAmount');",
                  "    pm.expect(jsonData).to.have.property('convertedAmount');",
                  "    pm.expect(jsonData).to.have.property('exchangeRate');",
                  "});",
                  "",
                  "pm.test(\"Currency conversion is correct\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.from).to.eql(\"USD\");",
                  "    pm.expect(jsonData.to).to.eql(\"PEN\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"from\": \"USD\",\n    \"to\": \"PEN\",\n    \"amount\": 100.00\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/exchange/convert",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "exchange", "convert"]
            }
          },
          "response": []
        },
        {
          "name": "Convert PEN to USD",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has conversion data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('convertedAmount');",
                  "    pm.expect(jsonData.from).to.eql(\"PEN\");",
                  "    pm.expect(jsonData.to).to.eql(\"USD\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"from\": \"PEN\",\n    \"to\": \"USD\",\n    \"amount\": 373.92\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/exchange/convert",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "exchange", "convert"]
            }
          },
          "response": []
        },
        {
          "name": "Convert EUR to USD",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"from\": \"EUR\",\n    \"to\": \"USD\",\n    \"amount\": 50.00\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/exchange/convert",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "exchange", "convert"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Exchange History",
      "item": [
        {
          "name": "Get All History for User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Each history item has required fields\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.length > 0) {",
                  "        pm.expect(jsonData[0]).to.have.property('id');",
                  "        pm.expect(jsonData[0]).to.have.property('conversionDate');",
                  "        pm.expect(jsonData[0]).to.have.property('fromCurrency');",
                  "        pm.expect(jsonData[0]).to.have.property('toCurrency');",
                  "        pm.expect(jsonData[0]).to.have.property('originalAmount');",
                  "        pm.expect(jsonData[0]).to.have.property('convertedAmount');",
                  "        pm.expect(jsonData[0]).to.have.property('exchangeRate');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/exchange/history",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "exchange", "history"]
            }
          },
          "response": []
        },
        {
          "name": "Get History with Date Range",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/exchange/history?startDate=2025-01-01&endDate=2025-12-31",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "exchange", "history"],
              "query": [
                {
                  "key": "startDate",
                  "value": "2025-01-01"
                },
                {
                  "key": "endDate",
                  "value": "2025-12-31"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Currency Summary",
      "item": [
        {
          "name": "Get Currency Summary for User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Each summary item has required fields\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.length > 0) {",
                  "        pm.expect(jsonData[0]).to.have.property('currency');",
                  "        pm.expect(jsonData[0]).to.have.property('totalConverted');",
                  "        pm.expect(jsonData[0]).to.have.property('conversionCount');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/exchange/summary",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "exchange", "summary"]
            }
          },
          "response": []
        },
        {
          "name": "Get Currency Summary with Date Range",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/exchange/summary?startDate=2025-01-01&endDate=2025-12-31",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "exchange", "summary"],
              "query": [
                {
                  "key": "startDate",
                  "value": "2025-01-01"
                },
                {
                  "key": "endDate",
                  "value": "2025-12-31"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Error Cases",
      "item": [
        {
          "name": "Convert with Invalid User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response has error message\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('details');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"from\": \"USD\",\n    \"to\": \"PEN\",\n    \"amount\": 100.00\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/exchange/convert",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "exchange", "convert"]
            }
          },
          "response": []
        },
        {
          "name": "Get History for Invalid User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/exchange/history",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "exchange", "history"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "API Documentation",
      "item": [
        {
          "name": "Get API Documentation",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/swagger-ui.html",
              "host": ["{{baseUrl}}"],
              "path": ["swagger-ui.html"]
            }
          },
          "response": []
        },
        {
          "name": "Get OpenAPI JSON",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api-docs",
              "host": ["{{baseUrl}}"],
              "path": ["api-docs"]
            }
          },
          "response": []
        }
      ]
    }
  ]
}
